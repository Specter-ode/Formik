{"version":3,"file":"static/js/548.6d249d5e.chunk.js","mappings":"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","sources":["webpack://Formik/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","webpack://Formik/./src/pages/ContactsPage/ContactsPage.module.css?0a45","redux/contacts/contacts-selectors.js","webpack://Formik/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://Formik/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://Formik/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Section_title__SLHvV\",\"section\":\"Section_section__Z2PLw\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__BnqXB\"};","export const getContacts = store => store.contacts;\nexport const getFilterValue = store => store.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"btn\":\"ContactForm_btn__wll+u\",\"block\":\"ContactForm_block__1h2W+\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"error\":\"ContactForm_error__C1smZ\"};","import PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst ContactForm = ({ onSubmitClick }) => {\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string()\n          .matches(/^[a-zA-Z]+$/, 'Must be only charaters')\n          .min(2, 'Must be 2 characters or more')\n          .required('Required'),\n        number: Yup.string()\n          .matches(/^[0-9]+$/gi, 'Must be only numbers')\n          .min(7, 'Must be 7 characters or more')\n          .required('Required'),\n        // .typeError('you must specify a number')\n      })}\n      onSubmit={(values, { resetForm }) => {\n        onSubmitClick({ ...values });\n        resetForm();\n      }}\n    >\n      {props => {\n        const { values, handleChange, handleSubmit, errors } = props;\n        return (\n          <Form className={s.form} onSubmit={handleSubmit}>\n            <div className={s.block}>\n              <Field\n                name=\"name\"\n                type=\"text\"\n                value={values.name}\n                className={s.input}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"name\" className={s.label}>\n                Name\n              </label>\n              <ErrorMessage name=\"name\" component=\"div\" className={s.error} />\n            </div>\n            <div className={s.block}>\n              <Field\n                name=\"number\"\n                type=\"tel\"\n                value={values.number}\n                className={s.input}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"number\" className={s.label}>\n                Number\n              </label>\n\n              <ErrorMessage name=\"number\">\n                {msg => <div className={s.error}>{msg}</div>}\n              </ErrorMessage>\n            </div>\n\n            <button\n              type=\"submit\"\n              className={s.btn}\n              disabled={errors.name || errors.number}\n            >\n              Submit\n            </button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n// const initialState = {\n//   name: '',\n//   number: '',\n// };\n// const ContactForm = ({ onSubmitClick }) => {\n//   const { state, handleChange, handleSubmit } = useForm({\n//     onSubmitClick,\n//     initialState,\n//   });\n//   const { name, number } = state;\n//   const isActive = name && number.length > 6;\n//   return (\n//     <form onSubmit={handleSubmit} className={s.form}>\n//       <FormTextField value={name} onChange={handleChange} {...fields.name} />\n//       <FormTextField\n//         value={number}\n//         onChange={handleChange}\n//         {...fields.number}\n//       />\n//       <button type=\"submit\" disabled={!isActive} className={s.btn}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n\nContactForm.propTypes = {\n  onSubmitClick: PropTypes.func.isRequired,\n};\nFormik.propTypes = {\n  values: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n};\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"info\":\"ContactList_info__ndqPX\",\"btn\":\"ContactList_btn__6Piat\"};","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, removeContact }) => {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p className={s.info}>\n            {name}: {number}\n          </p>\n          <button className={s.btn} type=\"button\" onClick={() => removeContact(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  removeContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__label\":\"Filter_filter__label__ttfPR\",\"filter__input\":\"Filter_filter__input__toa89\"};","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nconst Filter = props => {\n  const { valueFromFilter, catchFilterInfo } = props;\n  return (\n    <label className={s.filter__label}>\n      <input\n        type=\"text\"\n        value={valueFromFilter}\n        onChange={catchFilterInfo}\n        className={s.filter__input}\n      ></input>\n      Find contacts by name\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  valueFromFilter: PropTypes.string,\n  catchFilterInfo: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import s from './ContactsPage.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  fetchContacts,\n  removeContact,\n  addContact,\n} from '../../redux/contacts/contacts-operations';\nimport { filterChange } from '../../redux/contacts/contacts-slice';\nimport {\n  getContacts,\n  getFilterValue,\n} from '../../redux/contacts/contacts-selectors';\n\nimport Section from '../../components/Section/Section';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport Spinner from '../../components/Spinner/Spinner';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(getContacts);\n\n  const filterValue = useSelector(getFilterValue);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const onAddContact = newContactData => {\n    dispatch(addContact(newContactData));\n  };\n\n  const onRemoveContact = contactId => {\n    dispatch(removeContact(contactId));\n  };\n\n  const onChangeFilter = e => {\n    dispatch(filterChange(e.target.value));\n  };\n  const { items, loading, error, filter } = contacts;\n\n  const getVisibleContacts = () => {\n    const normalizedFilterValue = filter.toLowerCase().trim();\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilterValue)\n    );\n  };\n  return (\n    <main>\n      <div className={s.container}>\n        <Section title=\"Phonebook\">\n          <ContactForm onSubmitClick={onAddContact} />\n        </Section>\n        <Section title=\"Contacts\">\n          {loading && <Spinner />}\n          {items.length > 0 ? (\n            <>\n              <Filter\n                valueFromFilter={filterValue}\n                catchFilterInfo={onChangeFilter}\n              />\n              <ContactList\n                contacts={getVisibleContacts()}\n                removeContact={onRemoveContact}\n              />\n            </>\n          ) : (\n            <p>No contacts in phonebook</p>\n          )}\n          {error && <p>{error.message}</p>}\n        </Section>\n      </div>\n    </main>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["title","children","className","s","getContacts","store","contacts","getFilterValue","filter","Formik","values","PropTypes","name","number","handleChange","handleSubmit","onSubmitClick","initialValues","validationSchema","Yup","shape","matches","min","required","onSubmit","resetForm","props","errors","type","value","onChange","htmlFor","component","msg","disabled","removeContact","map","id","onClick","valueFromFilter","catchFilterInfo","useSelector","filterValue","dispatch","useDispatch","useEffect","fetchContacts","items","loading","error","Section","newContactData","addContact","Spinner","length","e","filterChange","target","normalizedFilterValue","toLowerCase","trim","contact","includes","getVisibleContacts","contactId","message"],"sourceRoot":""}