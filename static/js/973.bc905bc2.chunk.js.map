{"version":3,"file":"static/js/973.bc905bc2.chunk.js","mappings":"qIACA,MAAwB,uBAAxB,EAAyD,yB,SCgBzD,MAdA,YAAuC,IAApBA,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,qBAASC,UAAWC,EAApB,WACE,eAAID,UAAWC,EAAf,SAAyBH,IACxBC,O,kECNP,MAA4B,6B,oBCA5B,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAwF,yBAAxF,EAAyH,yBAAzH,EAAwJ,uBAAxJ,EAAuL,yB,uCCmFvL,EA9EkB,SAAC,GAAuB,IAArBG,EAAoB,EAApBA,cACnB,OACE,SAAC,KAAD,CACEC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,KAAaC,MAAM,CACnCJ,MAAOG,EAAAA,KAAaH,MAAM,mBAAmBK,SAAS,YACtDJ,SAAUE,EAAAA,KACPG,QACC,6CACA,iDAEDC,IAAI,EAAG,sCACPF,SAAS,cAIdG,SAAU,SAACC,EAAQC,GACjB,IAAQC,EAAcD,EAAdC,UACRb,GAAc,UAAKW,IACnBE,KApBJ,SAuBG,SAAAD,GACC,IAAQD,EAA+CC,EAA/CD,OAAQG,EAAuCF,EAAvCE,aAAcC,EAAyBH,EAAzBG,aAAcC,EAAWJ,EAAXI,OACpCd,EAAoBS,EAApBT,MAAOC,EAAaQ,EAAbR,SACTc,GAAYf,IAAUC,GAAYa,EAAOd,OAASc,EAAOb,SAC/D,OACE,SAACe,EAAA,EAAD,CAAStB,MAAM,aAAf,UACE,UAAC,KAAD,CAAME,UAAWC,EAAQW,SAAUK,EAAnC,WACE,iBAAKjB,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEoB,KAAK,QACLC,KAAK,QACLC,MAAOV,EAAOT,MACdJ,UAAWC,EACXuB,SAAUR,KAEZ,kBAAOS,QAAQ,QAAQzB,UAAWC,EAAlC,oBAGA,SAAC,KAAD,CAAcoB,KAAK,QAAQrB,UAAWC,EAAtC,SACG,SAAAyB,GAAG,OAAI,gBAAK1B,UAAWC,EAAhB,SAA0ByB,WAItC,iBAAK1B,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEoB,KAAK,WACLC,KAAK,WACLC,MAAOV,EAAOR,SACdL,UAAWC,EACXuB,SAAUR,KAEZ,kBAAOS,QAAQ,WAAWzB,UAAWC,EAArC,uBAGA,SAAC,KAAD,CAAcoB,KAAK,WAAWrB,UAAWC,EAAzC,SACG,SAAAyB,GAAG,OAAI,gBAAK1B,UAAWC,EAAhB,SAA0ByB,WAItC,mBAAQJ,KAAK,SAAStB,UAAWC,EAAO0B,SAAUR,EAAlD,6BCrDd,GAbkBS,E,MAAAA,KAAS,WACzB,OACE,2BACE,iBAAK5B,UAAWC,EAAhB,WACE,sGAIA,SAAC,EAAD,CAAWC,cAAe2B,EAAAA,EAAAA","sources":["webpack://Formik/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","webpack://Formik/./src/pages/LoginPage/LoginPage.module.css?f8e0","webpack://Formik/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.js","pages/LoginPage/LoginPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Section_title__SLHvV\",\"section\":\"Section_section__Z2PLw\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LoginPage_container__ZK1ET\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"block\":\"LoginForm_block__dqQ68\",\"label\":\"LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\",\"btn\":\"LoginForm_btn__B2KLK\",\"error\":\"LoginForm_error__012y+\"};","import PropTypes from 'prop-types';\nimport s from './LoginForm.module.css';\nimport Section from 'components/Section/Section';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst LoginForm = ({ onSubmitClick }) => {\n  return (\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email('Invalid address').required('Required'),\n        password: Yup.string()\n          .matches(\n            /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*$/,\n            'Must numbers, english small and large letters'\n          )\n          .min(8, 'Email must be 8 characters or more')\n          .required('Required'),\n        // .typeError('you must specify a number')\n      })}\n      // values это наш state in formik\n      onSubmit={(values, props) => {\n        const { resetForm } = props;\n        onSubmitClick({ ...values });\n        resetForm();\n      }}\n    >\n      {props => {\n        const { values, handleChange, handleSubmit, errors } = props;\n        const { email, password } = values;\n        const isActive = !email || !password || errors.email || errors.password;\n        return (\n          <Section title=\"Login form\">\n            <Form className={s.form} onSubmit={handleSubmit}>\n              <div className={s.block}>\n                <Field\n                  name=\"email\"\n                  type=\"email\"\n                  value={values.email}\n                  className={s.input}\n                  onChange={handleChange}\n                />\n                <label htmlFor=\"email\" className={s.label}>\n                  Email\n                </label>\n                <ErrorMessage name=\"email\" className={s.error}>\n                  {msg => <div className={s.error}>{msg}</div>}\n                </ErrorMessage>\n              </div>\n\n              <div className={s.block}>\n                <Field\n                  name=\"password\"\n                  type=\"password\"\n                  value={values.password}\n                  className={s.input}\n                  onChange={handleChange}\n                />\n                <label htmlFor=\"password\" className={s.label}>\n                  Password\n                </label>\n                <ErrorMessage name=\"password\" className={s.error}>\n                  {msg => <div className={s.error}>{msg}</div>}\n                </ErrorMessage>\n              </div>\n\n              <button type=\"submit\" className={s.btn} disabled={isActive}>\n                Submit\n              </button>\n            </Form>\n          </Section>\n        );\n      }}\n    </Formik>\n  );\n};\n\nLoginForm.propTypes = {\n  onSubmitClick: PropTypes.func.isRequired,\n};\nexport default LoginForm;\n","import s from './LoginPage.module.css';\nimport { authStore } from 'mobx/store';\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport { observer } from 'mobx-react-lite';\nconst LoginPage = observer(() => {\n  return (\n    <main>\n      <div className={s.container}>\n        <h3>\n          You are on the right way. To access to the phonebook you need to sign\n          in\n        </h3>\n        <LoginForm onSubmitClick={authStore.login} />\n      </div>\n    </main>\n  );\n});\nexport default LoginPage;\n"],"names":["title","children","className","s","onSubmitClick","initialValues","email","password","validationSchema","Yup","shape","required","matches","min","onSubmit","values","props","resetForm","handleChange","handleSubmit","errors","isActive","Section","name","type","value","onChange","htmlFor","msg","disabled","observer","authStore"],"sourceRoot":""}