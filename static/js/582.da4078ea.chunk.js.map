{"version":3,"file":"static/js/582.da4078ea.chunk.js","mappings":"qIACA,MAAwB,uBAAxB,EAAyD,yB,SCgBzD,MAdA,YAAuC,IAApBA,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,qBAASC,UAAWC,EAApB,WACE,eAAID,UAAWC,EAAf,SAAyBH,IACxBC,O,kECNP,MAA4B,gC,oBCA5B,EAAuB,2BAAvB,EAA0D,4BAA1D,EAA8F,4BAA9F,EAAkI,4BAAlI,EAAoK,0BAApK,EAAsM,4B,uCCsGtM,EAjGqB,SAAC,GAAuB,IAArBG,EAAoB,EAApBA,cACtB,OACE,SAAC,KAAD,CACEC,cAAe,CACbC,KAAM,GACNC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,EAAAA,KAAaC,MAAM,CACnCL,KAAMI,EAAAA,KACHE,QAAQ,cAAe,0BACvBC,IAAI,EAAG,gCACPC,SAAS,YACZP,MAAOG,EAAAA,KAAaH,MAAM,mBAAmBO,SAAS,YACtDN,SAAUE,EAAAA,KACPE,QACC,6CACA,iDAEDC,IAAI,EAAG,sCACPC,SAAS,cAEdC,SAAU,SAACC,EAAQC,GACjB,IAAQC,EAAcD,EAAdC,UACRd,GAAc,UAAKY,IACnBE,KAvBJ,SA0BG,SAAAD,GACC,IAAQD,EAA+CC,EAA/CD,OAAQG,EAAuCF,EAAvCE,aAAcC,EAAyBH,EAAzBG,aAAcC,EAAWJ,EAAXI,OACpCf,EAA0BU,EAA1BV,KAAMC,EAAoBS,EAApBT,MAAOC,EAAaQ,EAAbR,SACfc,GACHhB,IAASC,IAAUC,GAAYa,EAAOd,OAASc,EAAOb,SACzD,OACE,SAACe,EAAA,EAAD,CAASvB,MAAM,gBAAf,UACE,UAAC,KAAD,CAAME,UAAWC,EAAQY,SAAUK,EAAnC,WACE,iBAAKlB,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEG,KAAK,OACLkB,KAAK,OACLC,MAAOT,EAAOV,KACdJ,UAAWC,EACXuB,SAAUP,KAEZ,kBAAOQ,QAAQ,OAAOzB,UAAWC,EAAjC,mBAGA,SAAC,KAAD,CAAcG,KAAK,OAAOJ,UAAWC,EAArC,SACG,SAAAyB,GAAG,OAAI,gBAAK1B,UAAWC,EAAhB,SAA0ByB,WAGtC,iBAAK1B,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEG,KAAK,QACLkB,KAAK,QACLC,MAAOT,EAAOT,MACdL,UAAWC,EACXuB,SAAUP,KAEZ,kBAAOQ,QAAQ,QAAQzB,UAAWC,EAAlC,oBAGA,SAAC,KAAD,CAAcG,KAAK,QAAQJ,UAAWC,EAAtC,SACG,SAAAyB,GAAG,OAAI,gBAAK1B,UAAWC,EAAhB,SAA0ByB,WAItC,iBAAK1B,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEG,KAAK,WACLkB,KAAK,WACLC,MAAOT,EAAOR,SACdN,UAAWC,EACXuB,SAAUP,KAEZ,kBAAOQ,QAAQ,WAAWzB,UAAWC,EAArC,uBAGA,SAAC,KAAD,CAAcG,KAAK,WAAWJ,UAAWC,EAAzC,SACG,SAAAyB,GAAG,OAAI,gBAAK1B,UAAWC,EAAhB,SAA0ByB,WAItC,mBAAQJ,KAAK,SAAStB,UAAWC,EAAO0B,SAAUP,EAAlD,6BCrEd,GAfqBQ,E,MAAAA,KAAS,WAE5B,OADAC,QAAQC,IAAIC,EAAAA,EAAAA,UAEV,2BACE,iBAAK/B,UAAWC,EAAhB,WACE,uGAIA,SAAC,EAAD,CAAcC,cAAe8B,EAAAA,EAAAA","sources":["webpack://Formik/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","webpack://Formik/./src/pages/RegisterPage/RegisterPage.module.css?fdcb","webpack://Formik/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.js","pages/RegisterPage/RegisterPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Section_title__SLHvV\",\"section\":\"Section_section__Z2PLw\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RegisterPage_container__l-2BF\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"block\":\"RegisterForm_block__9f3Q-\",\"label\":\"RegisterForm_label__4pTXF\",\"input\":\"RegisterForm_input__FsgBz\",\"btn\":\"RegisterForm_btn__bgTuW\",\"error\":\"RegisterForm_error__yDHjz\"};","import PropTypes from 'prop-types';\nimport s from './RegisterForm.module.css';\nimport Section from 'components/Section/Section';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst RegisterForm = ({ onSubmitClick }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string()\n          .matches(/^[a-zA-Z]+$/, 'Must be only charaters')\n          .min(2, 'Must be 2 characters or more')\n          .required('Required'),\n        email: Yup.string().email('Invalid address').required('Required'),\n        password: Yup.string()\n          .matches(\n            /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\\s).*$/,\n            'Must numbers, english small and large letters'\n          )\n          .min(8, 'Email must be 8 characters or more')\n          .required('Required'),\n      })}\n      onSubmit={(values, props) => {\n        const { resetForm } = props;\n        onSubmitClick({ ...values });\n        resetForm();\n      }}\n    >\n      {props => {\n        const { values, handleChange, handleSubmit, errors } = props;\n        const { name, email, password } = values;\n        const isActive =\n          !name || !email || !password || errors.email || errors.password;\n        return (\n          <Section title=\"Register form\">\n            <Form className={s.form} onSubmit={handleSubmit}>\n              <div className={s.block}>\n                <Field\n                  name=\"name\"\n                  type=\"name\"\n                  value={values.name}\n                  className={s.input}\n                  onChange={handleChange}\n                />\n                <label htmlFor=\"name\" className={s.label}>\n                  Name\n                </label>\n                <ErrorMessage name=\"name\" className={s.error}>\n                  {msg => <div className={s.error}>{msg}</div>}\n                </ErrorMessage>\n              </div>\n              <div className={s.block}>\n                <Field\n                  name=\"email\"\n                  type=\"email\"\n                  value={values.email}\n                  className={s.input}\n                  onChange={handleChange}\n                />\n                <label htmlFor=\"email\" className={s.label}>\n                  Email\n                </label>\n                <ErrorMessage name=\"email\" className={s.error}>\n                  {msg => <div className={s.error}>{msg}</div>}\n                </ErrorMessage>\n              </div>\n\n              <div className={s.block}>\n                <Field\n                  name=\"password\"\n                  type=\"password\"\n                  value={values.password}\n                  className={s.input}\n                  onChange={handleChange}\n                />\n                <label htmlFor=\"password\" className={s.label}>\n                  Password\n                </label>\n                <ErrorMessage name=\"password\" className={s.error}>\n                  {msg => <div className={s.error}>{msg}</div>}\n                </ErrorMessage>\n              </div>\n\n              <button type=\"submit\" className={s.btn} disabled={isActive}>\n                Submit\n              </button>\n            </Form>\n          </Section>\n        );\n      }}\n    </Formik>\n  );\n};\n\nRegisterForm.propTypes = {\n  onSubmitClick: PropTypes.func.isRequired,\n};\nexport default RegisterForm;\n","import s from './RegisterPage.module.css';\nimport { authStore, contactsStore } from 'mobx/store';\nimport RegisterForm from '../../components/RegisterForm/RegisterForm';\nimport { observer } from 'mobx-react-lite';\n\nconst RegisterPage = observer(() => {\n  console.log(contactsStore.loading);\n  return (\n    <main>\n      <div className={s.container}>\n        <h3>\n          You are on the right way. To access to the phonebook you need to\n          register\n        </h3>\n        <RegisterForm onSubmitClick={authStore.register} />\n      </div>\n    </main>\n  );\n});\n\nexport default RegisterPage;\n"],"names":["title","children","className","s","onSubmitClick","initialValues","name","email","password","validationSchema","Yup","shape","matches","min","required","onSubmit","values","props","resetForm","handleChange","handleSubmit","errors","isActive","Section","type","value","onChange","htmlFor","msg","disabled","observer","console","log","contactsStore","authStore"],"sourceRoot":""}