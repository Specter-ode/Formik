{"version":3,"file":"static/js/860.5a1fc92b.chunk.js","mappings":"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","sources":["webpack://Formik/./src/components/Section/Section.module.css?dbe8","components/Section/Section.js","webpack://Formik/./src/pages/ContactsPage/ContactsPage.module.css?0a45","webpack://Formik/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://Formik/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","webpack://Formik/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Section_title__SLHvV\",\"section\":\"Section_section__Z2PLw\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section className={s.section}>\n      <h2 className={s.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__BnqXB\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"btn\":\"ContactForm_btn__wll+u\",\"block\":\"ContactForm_block__1h2W+\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"error\":\"ContactForm_error__C1smZ\"};","import PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst ContactForm = ({ onSubmitClick }) => {\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string()\n          .matches(/^[a-zA-Z]+$/, 'Must be only charaters')\n          .min(2, 'Must be 2 characters or more')\n          .required('Required'),\n        number: Yup.string()\n          .matches(/^[0-9]+$/gi, 'Must be only numbers')\n          .min(7, 'Must be 7 characters or more')\n          .required('Required'),\n        // .typeError('you must specify a number')\n      })}\n      onSubmit={(values, { resetForm }) => {\n        onSubmitClick({ ...values });\n        resetForm();\n      }}\n    >\n      {props => {\n        const { values, handleChange, handleSubmit, errors } = props;\n        return (\n          <Form className={s.form} onSubmit={handleSubmit}>\n            <div className={s.block}>\n              <Field\n                name=\"name\"\n                type=\"text\"\n                value={values.name}\n                className={s.input}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"name\" className={s.label}>\n                Name\n              </label>\n              <ErrorMessage name=\"name\" component=\"div\" className={s.error} />\n            </div>\n            <div className={s.block}>\n              <Field\n                name=\"number\"\n                type=\"tel\"\n                value={values.number}\n                className={s.input}\n                onChange={handleChange}\n              />\n              <label htmlFor=\"number\" className={s.label}>\n                Number\n              </label>\n\n              <ErrorMessage name=\"number\">\n                {msg => <div className={s.error}>{msg}</div>}\n              </ErrorMessage>\n            </div>\n\n            <button\n              type=\"submit\"\n              className={s.btn}\n              disabled={errors.name || errors.number}\n            >\n              Submit\n            </button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n// const initialState = {\n//   name: '',\n//   number: '',\n// };\n// const ContactForm = ({ onSubmitClick }) => {\n//   const { state, handleChange, handleSubmit } = useForm({\n//     onSubmitClick,\n//     initialState,\n//   });\n//   const { name, number } = state;\n//   const isActive = name && number.length > 6;\n//   return (\n//     <form onSubmit={handleSubmit} className={s.form}>\n//       <FormTextField value={name} onChange={handleChange} {...fields.name} />\n//       <FormTextField\n//         value={number}\n//         onChange={handleChange}\n//         {...fields.number}\n//       />\n//       <button type=\"submit\" disabled={!isActive} className={s.btn}>\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n\nContactForm.propTypes = {\n  onSubmitClick: PropTypes.func.isRequired,\n};\nFormik.propTypes = {\n  values: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n};\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"info\":\"ContactList_info__ndqPX\",\"btn\":\"ContactList_btn__6Piat\"};","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, removeContact }) => {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p className={s.info}>\n            {name}: {number}\n          </p>\n          <button\n            className={s.btn}\n            type=\"button\"\n            onClick={() => removeContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  removeContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__label\":\"Filter_filter__label__ttfPR\",\"filter__input\":\"Filter_filter__input__toa89\"};","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nconst Filter = props => {\n  const { valueFromFilter, catchFilterInfo } = props;\n  return (\n    <label className={s.filter__label}>\n      <input\n        type=\"text\"\n        value={valueFromFilter}\n        onChange={catchFilterInfo}\n        className={s.filter__input}\n      ></input>\n      Find contacts by name\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  valueFromFilter: PropTypes.string,\n  catchFilterInfo: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import s from './ContactsPage.module.css';\nimport { useEffect } from 'react';\nimport Section from '../../components/Section/Section';\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport Spinner from '../../components/Spinner/Spinner';\nimport { contactsStore } from 'mobx/store';\nimport { observer } from 'mobx-react-lite';\n\nconst ContactsPage = observer(() => {\n  const {\n    fetchContacts,\n    addContact,\n    removeContact,\n    onChangeFilter,\n    items,\n    loading,\n    error,\n    filter,\n    visibleContacts,\n  } = contactsStore;\n\n  useEffect(() => {\n    fetchContacts();\n    console.log('запрос фетч контактс');\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <main>\n      <div className={s.container}>\n        <Section title=\"Phonebook\">\n          <ContactForm onSubmitClick={addContact} />\n        </Section>\n        <Section title=\"Contacts\">\n          {loading && <Spinner />}\n          {items.length > 0 ? (\n            <>\n              <Filter\n                valueFromFilter={filter}\n                catchFilterInfo={onChangeFilter}\n              />\n              <ContactList\n                contacts={visibleContacts}\n                removeContact={removeContact}\n              />\n            </>\n          ) : (\n            <p>No contacts in phonebook</p>\n          )}\n          {error && <p>{error.message}</p>}\n        </Section>\n      </div>\n    </main>\n  );\n});\n\nexport default ContactsPage;\n"],"names":["title","children","className","s","Formik","values","PropTypes","name","number","handleChange","handleSubmit","onSubmitClick","initialValues","validationSchema","Yup","shape","matches","min","required","onSubmit","resetForm","props","errors","type","value","onChange","htmlFor","component","msg","disabled","contacts","removeContact","map","id","onClick","valueFromFilter","catchFilterInfo","observer","fetchContacts","contactsStore","addContact","onChangeFilter","items","loading","error","filter","visibleContacts","useEffect","console","log","Section","Spinner","length","message"],"sourceRoot":""}